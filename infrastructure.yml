AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Complete stack for a highly available Java application on ECS Fargate
  with a full CI/CD pipeline using CodeDeploy for blue/green deployments.

Parameters:
  GitHubOIDCRoleName:
    Type: String
    Description: "The name of the IAM Role created for GitHub Actions OIDC."
    Default: "YourGitHubOidcRoleName"

Resources:
  # ------------------------------------------------------------#
  # Networking Resources
  # ------------------------------------------------------------#
  ProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProjectVPC

  ProjectInternetGateway:
    Type: AWS::EC2::InternetGateway

  ProjectVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ProjectVPC
      InternetGatewayId: !Ref ProjectInternetGateway

  ProjectPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Project-PublicSubnetA

  ProjectPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Project-PublicSubnetB

  ProjectPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: Project-PrivateSubnetA

  ProjectPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: Project-PrivateSubnetB

  ProjectPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProjectVPC

  ProjectPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ProjectVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref ProjectPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProjectInternetGateway

  ProjectPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProjectPublicSubnetA
      RouteTableId: !Ref ProjectPublicRouteTable

  ProjectPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProjectPublicSubnetB
      RouteTableId: !Ref ProjectPublicRouteTable

  ProjectPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProjectVPC

  ProjectPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProjectPrivateSubnetA
      RouteTableId: !Ref ProjectPrivateRouteTable

  ProjectPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProjectPrivateSubnetB
      RouteTableId: !Ref ProjectPrivateRouteTable

  ProjectAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP access from the internet"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ProjectECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic from ALB to ECS tasks"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ProjectAlbSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16  # Allow HTTPS to VPC endpoints
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16  # Allow PostgreSQL to RDS

  ProjectRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow PostgreSQL from ECS only"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ProjectECSServiceSecurityGroup

# ------------------------------------------------------------#
# VPC ENDPOINTS
# ------------------------------------------------------------#
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTPS from ECS to VPC Endpoints"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ProjectECSServiceSecurityGroup

  # S3 Gateway Endpoint (for ECR and your photo bucket)
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProjectVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref ProjectPrivateRouteTable
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"

  # ECR API Interface Endpoint (for docker push/pull)
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProjectVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds:
        - !Ref ProjectPrivateSubnetA
        - !Ref ProjectPrivateSubnetB

  # ECR DKR Interface Endpoint (for docker registry)
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProjectVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds:
        - !Ref ProjectPrivateSubnetA
        - !Ref ProjectPrivateSubnetB

  # CloudWatch Logs Interface Endpoint
  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProjectVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds:
        - !Ref ProjectPrivateSubnetA
        - !Ref ProjectPrivateSubnetB

  # Secrets Manager Interface Endpoint (for database credentials)
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProjectVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds:
        - !Ref ProjectPrivateSubnetA
        - !Ref ProjectPrivateSubnetB

  # ------------------------------------------------------------#
  # IAM Roles
  # ------------------------------------------------------------#
  ProjectTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: AllowSecretsManagerAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DBSecret

  ProjectCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - ecr:DescribeImages
                  - codedeploy:*
                  - ecs:DescribeServices
                  - iam:PassRole
                  - ecs:*
                  - ecr:GetAuthorizationToken 
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"

  ProjectCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1

  ProjectGitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref GitHubOIDCRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHubOIDCProvider.Arn
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:Boadu123/pipeline_lab:*'
      Policies:
        - PolicyName: ECRPushPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                Resource: !GetAtt ProjectECRRepository.Arn
  
  # Add this NEW IAM Role after your existing roles
  ProjectTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApplicationPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt PhotoBucket.Arn
                  - !Sub "${PhotoBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret

  # ------------------------------------------------------------#
  # Data Storage Resources
  # ------------------------------------------------------------#
  # Private S3 Bucket for Photos
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Database Secret (never hardcode credentials!)
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "RDS PostgreSQL credentials for photo gallery"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-secret

  # Database Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref ProjectPrivateSubnetA
        - !Ref ProjectPrivateSubnetB

  # RDS PostgreSQL Instance
  PhotoGalleryDB:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - DBSecret
    - DBSubnetGroup
    - ProjectRDSSecurityGroup
    Properties:
      DBInstanceIdentifier: !Sub ${AWS::StackName}-postgres
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.12"
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      AllocatedStorage: 20
      MaxAllocatedStorage: 50
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt ProjectRDSSecurityGroup.GroupId
      PubliclyAccessible: false
      MultiAZ: false
      BackupRetentionPeriod: 7
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-database

  # ------------------------------------------------------------#
  # ECR, ECS, and ALB Resources
  # ------------------------------------------------------------#
  ProjectECRRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: my-project-app
      ImageScanningConfiguration:
        ScanOnPush: true

  ProjectECSLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: /ecs/project-app
      RetentionInDays: 7

  ProjectECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: project-app-cluster
  
  # Update your existing Task Definition to include Task Role and environment variables
  ProjectTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: project-app-task
      RequiresCompatibilities: [FARGATE]
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ProjectTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ProjectTaskRole.Arn  # NEW: Add this line
      ContainerDefinitions:
        - Name: project-app
          Image: 771826808190.dkr.ecr.eu-central-1.amazonaws.com/my-project-app:latest
          PortMappings:
            - ContainerPort: 8080
          # ADD environment variables for Phase 2
          Environment:
            - Name: S3_BUCKET_NAME
              Value: !Ref PhotoBucket
            - Name: DB_HOST
              Value: !GetAtt PhotoGalleryDB.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt PhotoGalleryDB.Endpoint.Port
            - Name: DB_NAME
              Value: postgres
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ProjectECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ProjectLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref ProjectPublicSubnetA, !Ref ProjectPublicSubnetB]
      SecurityGroups: [!Ref ProjectAlbSecurityGroup]

  ProjectTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ProjectVPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  ProjectTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ProjectVPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  ProjectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ProjectLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProjectTargetGroupBlue

  # ProjectECSService:
  #   Type: AWS::ECS::Service
  #   DependsOn: ProjectListener
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     ServiceName: project-app-service
  #     Cluster: !Ref ProjectECSCluster
  #     DesiredCount: 0
  #     LaunchType: FARGATE
  #     TaskDefinition: !Ref ProjectTaskDefinition
  #     DeploymentController:
  #       Type: CODE_DEPLOY
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         SecurityGroups: [!Ref ProjectECSServiceSecurityGroup]
  #         Subnets: [!Ref ProjectPrivateSubnetA, !Ref ProjectPrivateSubnetB]
  #     LoadBalancers:
  #       - ContainerName: project-app
  #         ContainerPort: 8080
  #         TargetGroupArn: !Ref ProjectTargetGroupBlue

  # ------------------------------------------------------------#
  # Auto Scaling Resources
  # ------------------------------------------------------------#
  ProjectECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ProjectECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${ProjectECSCluster}/${ProjectECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ProjectECSScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "ProjectECSServiceCpuScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ProjectECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  # ------------------------------------------------------------#
  # CloudFront for Private S3 Bucket (PhotoBucket)
  # ------------------------------------------------------------#

  # Origin Access Control (OAC)
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        Description: "OAC for CloudFront to access private S3 bucket"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # Cache Policy (Managed for static content)
  ManagedCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-CachePolicy"
        DefaultTTL: 86400
        MaxTTL: 31536000 
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  # CloudFront Distribution
  PhotoCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "CloudFront distribution for ${AWS::StackName} photos"
        Origins:
          - Id: PhotoBucketOrigin
            DomainName: !GetAtt PhotoBucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOAC
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: PhotoBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: !Ref ManagedCachePolicy
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Updated Bucket Policy to allow CloudFront access only
  PhotoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotoBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontRead"
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "${PhotoBucket.Arn}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${PhotoCloudFrontDistribution}"
          - Sid: "AllowECSUploadFromVPCEndpoint"
            Effect: Allow
            Principal:
              AWS: !GetAtt ProjectTaskRole.Arn
            Action: 
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            Resource: !Sub "${PhotoBucket.Arn}/*"
            
  # ------------------------------------------------------------#
  # CI/CD Pipeline Resources
  # ------------------------------------------------------------#
  ProjectArtifactBucket:
    Type: AWS::S3::Bucket
    # Ensures the bucket is deleted when the stack is deleted.
    # WARNING: This will fail if the bucket contains objects.
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ProjectCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Project-ECS-App
      ComputePlatform: ECS

  ProjectCodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref ProjectCodeDeployApplication
      DeploymentGroupName: Project-ECS-DG
      ServiceRoleArn: !GetAtt ProjectCodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE]
      # ECSServices:
      #   - ClusterName: !Ref ProjectECSCluster
      #     ServiceName: !GetAtt ProjectECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !GetAtt ProjectTargetGroupBlue.TargetGroupName
              - Name: !GetAtt ProjectTargetGroupGreen.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ProjectListener

  ProjectEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger CodePipeline on new ECR image push"
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - "ECR Image Action"
        detail:
          action-type:
            - PUSH
          result:
            - SUCCESS
          repository-name:
            - my-project-app
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectCICDPipeline}"
          RoleArn: !GetAtt ProjectEventBridgeIAMRole.Arn
          Id: "CodePipelineTarget"

  ProjectCICDPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ProjectCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ProjectArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceFromS3
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref ProjectArtifactBucket
                S3ObjectKey: deployment_package.zip
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref ProjectCodeDeployApplication
                DeploymentGroupName: !Ref ProjectCodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: "SourceArtifact"
                AppSpecTemplateArtifact: "SourceArtifact"
                AppSpecTemplatePath: "appspec.yaml"
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

  ProjectEventBridgeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipeline-Invoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectCICDPipeline}'

Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ProjectLoadBalancer.DNSName
  ECRRepoUri:
    Description: The URI of the ECR repository
    Value: !GetAtt ProjectECRRepository.RepositoryUri
  ArtifactBucketName:
    Description: The name of the S3 bucket for pipeline artifacts
    Value: !Ref ProjectArtifactBucket
  TaskExecutionRoleArn:
    Description: The ARN of the ECS Task Execution Role
    Value: !GetAtt ProjectTaskExecutionRole.Arn
  LogGroupName:
    Description: The name of the ECS Log Group
    Value: !Ref ProjectECSLogGroup
  DBHost:
    Description: RDS Database Host
    Value: !GetAtt PhotoGalleryDB.Endpoint.Address
  DBSecretArn:
    Description: Database Secret ARN
    Value: !Ref DBSecret
  S3BucketName:
    Description: S3 Bucket Name for Photos
    Value: !Ref PhotoBucket
  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value: !GetAtt PhotoCloudFrontDistribution.DomainName
  TaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt ProjectTaskRole.Arn